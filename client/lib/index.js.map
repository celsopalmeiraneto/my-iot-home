{"version":3,"sources":["../src/index.js"],"names":["mqttClient","process","env","MQTT_SERVER","aIOTemperature","parseInt","AIO_TEMP_SENSOR","temperatureSensor","GroveTemperature","aIOLight","lightSensor","GroveLight","setInterval","temperatureReading","temperatureInCelsius","temp","Temperature","Date","publish","JSON","stringify","INTERVAL_TEMP_COLLECTION_SECS","changedLuminosity","lightInLumens","valueInLux","light","Luminosity"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,UAAU,GAAG,mBAAQC,OAAO,CAACC,GAAR,CAAYC,WAApB,CAAnB;AAEA,IAAMC,cAAc,GAAGC,QAAQ,CAACJ,OAAO,CAACC,GAAR,CAAYI,eAAb,CAA/B;AACA,IAAMC,iBAAiB,GAAG,IAAIC,yBAAJ,CAAqBJ,cAArB,CAA1B;AAEA,IAAMK,QAAQ,GAAGJ,QAAQ,CAACJ,OAAO,CAACC,GAAR,CAAYI,eAAb,CAAzB;AACA,IAAMI,WAAW,GAAG,IAAIC,mBAAJ,CAAeF,QAAf,CAApB;AAEAG,WAAW,CAAC,YAAM;AAChB,MAAMC,kBAAkB,GAAGN,iBAAiB,CAACO,oBAAlB,EAA3B;AACA,MAAMC,IAAI,GAAG,IAAIC,oBAAJ,CAAgB,IAAIC,IAAJ,EAAhB,EAA4BJ,kBAA5B,CAAb;AAEAb,EAAAA,UAAU,CAACkB,OAAX,CAAmB,aAAnB,EAAkCC,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAlC;AACD,CALU,EAKR,CAACV,QAAQ,CAACJ,OAAO,CAACC,GAAR,CAAYmB,6BAAb,CAAR,IAAuD,CAAxD,IAA6D,IALrD,CAAX;AAQA,IAAMC,iBAAiB,GAAG,wBAAY,CAAZ,CAA1B;AACAV,WAAW,CAAC,YAAM;AAChB,MAAMW,aAAa,GAAGb,WAAW,CAACc,UAAZ,EAAtB;;AAEA,MAAIF,iBAAiB,CAACC,aAAD,CAArB,EAAsC;AACpC,QAAME,KAAK,GAAG,IAAIC,mBAAJ,CAAe,IAAIT,IAAJ,EAAf,EAA2BM,aAA3B,CAAd;AAEAvB,IAAAA,UAAU,CAACkB,OAAX,CAAmB,YAAnB,EAAiCC,IAAI,CAACC,SAAL,CAAeK,KAAf,CAAjC;AACD;AACF,CARU,EAQR,IARQ,CAAX","sourcesContent":["import {connect} from 'mqtt';\nimport GroveTemperature from './sensors/GroveTemperature';\nimport Temperature from 'myiothome-commons/lib/Temperature';\nimport GroveLight from './sensors/GroveLight';\nimport Luminosity from 'myiothome-commons/lib/Luminosity';\nimport { thresholder } from './utils';\n\nconst mqttClient = connect(process.env.MQTT_SERVER);\n\nconst aIOTemperature = parseInt(process.env.AIO_TEMP_SENSOR);\nconst temperatureSensor = new GroveTemperature(aIOTemperature);\n\nconst aIOLight = parseInt(process.env.AIO_TEMP_SENSOR);\nconst lightSensor = new GroveLight(aIOLight);\n\nsetInterval(() => {\n  const temperatureReading = temperatureSensor.temperatureInCelsius();\n  const temp = new Temperature(new Date(), temperatureReading);\n\n  mqttClient.publish('temperature', JSON.stringify(temp));\n}, (parseInt(process.env.INTERVAL_TEMP_COLLECTION_SECS) || 1) * 1000);\n\n\nconst changedLuminosity = thresholder(1);\nsetInterval(() => {\n  const lightInLumens = lightSensor.valueInLux();\n\n  if (changedLuminosity(lightInLumens)) {\n    const light = new Luminosity(new Date(), lightInLumens);\n\n    mqttClient.publish('luminosity', JSON.stringify(light));\n  }\n}, 1000);\n\n"],"file":"index.js"}