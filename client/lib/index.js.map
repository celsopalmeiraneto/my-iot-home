{"version":3,"sources":["../src/index.js"],"names":["aIOTemperature","parseInt","process","env","AIO_TEMP_SENSOR","temperatureSensor","GroveTemperature","aIOLight","lightSensor","GroveLight","setInterval","temperatureReading","temperatureInCelsius","temp","Temperature","Date","console","log","INTERVAL_TEMP_COLLECTION_SECS","changedLuminosity","lightInLumens","valueInLux","light","Luminosity"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,cAAc,GAAGC,QAAQ,CAACC,OAAO,CAACC,GAAR,CAAYC,eAAb,CAA/B;AACA,IAAMC,iBAAiB,GAAG,IAAIC,yBAAJ,CAAqBN,cAArB,CAA1B;AAEA,IAAMO,QAAQ,GAAGN,QAAQ,CAACC,OAAO,CAACC,GAAR,CAAYC,eAAb,CAAzB;AACA,IAAMI,WAAW,GAAG,IAAIC,mBAAJ,CAAeF,QAAf,CAApB;AAEAG,WAAW,CAAC,YAAM;AAChB,MAAMC,kBAAkB,GAAGN,iBAAiB,CAACO,oBAAlB,EAA3B;AACA,MAAMC,IAAI,GAAG,IAAIC,oBAAJ,CAAgB,IAAIC,IAAJ,EAAhB,EAA4BJ,kBAA5B,CAAb;AAEAK,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBJ,IAApB;AACD,CALU,EAKR,CAACZ,QAAQ,CAACC,OAAO,CAACC,GAAR,CAAYe,6BAAb,CAAR,IAAuD,CAAxD,IAA6D,IALrD,CAAX;AAQA,IAAMC,iBAAiB,GAAG,wBAAY,CAAZ,CAA1B;AACAT,WAAW,CAAC,YAAM;AAChB,MAAMU,aAAa,GAAGZ,WAAW,CAACa,UAAZ,EAAtB;;AAEA,MAAIF,iBAAiB,CAACC,aAAD,CAArB,EAAsC;AACpC,QAAME,KAAK,GAAG,IAAIC,mBAAJ,CAAe,IAAIR,IAAJ,EAAf,EAA2BK,aAA3B,CAAd;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBK,KAArB;AACD;AACF,CAPU,EAOR,IAPQ,CAAX","sourcesContent":["import GroveTemperature from './sensors/GroveTemperature';\nimport Temperature from 'myiothome-commons/lib/Temperature';\nimport GroveLight from './sensors/GroveLight';\nimport Luminosity from 'myiothome-commons/lib/Luminosity';\nimport {thresholder} from './utils';\n\nconst aIOTemperature = parseInt(process.env.AIO_TEMP_SENSOR);\nconst temperatureSensor = new GroveTemperature(aIOTemperature);\n\nconst aIOLight = parseInt(process.env.AIO_TEMP_SENSOR);\nconst lightSensor = new GroveLight(aIOLight);\n\nsetInterval(() => {\n  const temperatureReading = temperatureSensor.temperatureInCelsius();\n  const temp = new Temperature(new Date(), temperatureReading);\n\n  console.log('Temp', temp);\n}, (parseInt(process.env.INTERVAL_TEMP_COLLECTION_SECS) || 1) * 1000);\n\n\nconst changedLuminosity = thresholder(1);\nsetInterval(() => {\n  const lightInLumens = lightSensor.valueInLux();\n\n  if (changedLuminosity(lightInLumens)) {\n    const light = new Luminosity(new Date(), lightInLumens);\n    console.log('light', light);\n  }\n}, 1000);\n\n"],"file":"index.js"}